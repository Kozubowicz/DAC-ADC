
DAC_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d80  08004d80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d80  08004d80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000000c  08004d94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004d94  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c3  00000000  00000000  00031128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000333f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218fc  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ac2  00000000  00000000  00056b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d44b1  00000000  00000000  00067636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  0013bb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004d28 	.word	0x08004d28

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004d28 	.word	0x08004d28

080001cc <main>:
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);

uint32_t Wave[128] ;

int main(void){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  HAL_Init();
 80001d2:	f000 fcca 	bl	8000b6a <HAL_Init>

  SystemClock_Config();
 80001d6:	f000 f82b 	bl	8000230 <SystemClock_Config>

  MX_DMA_Init();
 80001da:	f000 fa37 	bl	800064c <MX_DMA_Init>
  MX_GPIO_Init();
 80001de:	f000 fa5b 	bl	8000698 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e2:	f000 f911 	bl	8000408 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e6:	f000 f9bb 	bl	8000560 <MX_TIM2_Init>
  MX_DAC1_Init();
 80001ea:	f000 f8d9 	bl	80003a0 <MX_DAC1_Init>
  MX_ADC1_Init();
 80001ee:	f000 f871 	bl	80002d4 <MX_ADC1_Init>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)Wave, 128, DAC_ALIGN_12B_R);
 80001f2:	2300      	movs	r3, #0
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2380      	movs	r3, #128	; 0x80
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x54>)
 80001fe:	f001 ff09 	bl	8002014 <HAL_DAC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <main+0x58>)
 8000204:	f003 fe86 	bl	8003f14 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x5c>)
 800020a:	f003 fe83 	bl	8003f14 <HAL_TIM_Base_Start>

  while (1){
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Wave, 128);
 800020e:	2280      	movs	r2, #128	; 0x80
 8000210:	4902      	ldr	r1, [pc, #8]	; (800021c <main+0x50>)
 8000212:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x60>)
 8000214:	f001 f852 	bl	80012bc <HAL_ADC_Start_DMA>
 8000218:	e7f9      	b.n	800020e <main+0x42>
 800021a:	bf00      	nop
 800021c:	2000017c 	.word	0x2000017c
 8000220:	20000028 	.word	0x20000028
 8000224:	2000037c 	.word	0x2000037c
 8000228:	20000130 	.word	0x20000130
 800022c:	20000084 	.word	0x20000084

08000230 <SystemClock_Config>:
  }
}

void SystemClock_Config(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0314 	add.w	r3, r7, #20
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 fd6a 	bl	8004d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]


  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK){
 8000252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000256:	f002 fcdb 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x34>
    Error_Handler();
 8000260:	f000 fa32 	bl	80006c8 <Error_Handler>
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	2302      	movs	r3, #2
 8000266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000276:	2302      	movs	r3, #2
 8000278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800027a:	2301      	movs	r3, #1
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800027e:	230a      	movs	r3, #10
 8000280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000282:	2307      	movs	r3, #7
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fd12 	bl	8002cbc <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x72>
    Error_Handler();
 800029e:	f000 fa13 	bl	80006c8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2303      	movs	r3, #3
 80002a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 80002b6:	463b      	mov	r3, r7
 80002b8:	2104      	movs	r1, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 f91e 	bl	80034fc <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x9a>
    Error_Handler();
 80002c6:	f000 f9ff 	bl	80006c8 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3758      	adds	r7, #88	; 0x58
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_ADC1_Init>:

static void MX_ADC1_Init(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 80002ea:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <MX_ADC1_Init+0xc0>)
 80002ec:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <MX_ADC1_Init+0xc4>)
 80002ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f0:	4b28      	ldr	r3, [pc, #160]	; (8000394 <MX_ADC1_Init+0xc0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f6:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_ADC1_Init+0xc0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_ADC1_Init+0xc0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_ADC1_Init+0xc0>)
 800030a:	2204      	movs	r2, #4
 800030c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000310:	2200      	movs	r2, #0
 8000312:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000316:	2200      	movs	r2, #0
 8000318:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_ADC1_Init+0xc0>)
 800031c:	2201      	movs	r2, #1
 800031e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000322:	2200      	movs	r2, #0
 8000324:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_ADC1_Init+0xc0>)
 800032a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_ADC1_Init+0xc0>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000342:	2200      	movs	r2, #0
 8000344:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK){
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_ADC1_Init+0xc0>)
 8000350:	f000 fe6c 	bl	800102c <HAL_ADC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0x8a>
    Error_Handler();
 800035a:	f000 f9b5 	bl	80006c8 <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_12;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_ADC1_Init+0xc8>)
 8000360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000362:	2306      	movs	r3, #6
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036a:	237f      	movs	r3, #127	; 0x7f
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800036e:	2304      	movs	r3, #4
 8000370:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 100;
 8000372:	2364      	movs	r3, #100	; 0x64
 8000374:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000376:	463b      	mov	r3, r7
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_ADC1_Init+0xc0>)
 800037c:	f001 f840 	bl	8001400 <HAL_ADC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0xb6>
    Error_Handler();
 8000386:	f000 f99f 	bl	80006c8 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000084 	.word	0x20000084
 8000398:	50040000 	.word	0x50040000
 800039c:	32601000 	.word	0x32601000

080003a0 <MX_DAC1_Init>:

static void MX_DAC1_Init(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2224      	movs	r2, #36	; 0x24
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f004 fcb3 	bl	8004d18 <memset>

  hdac1.Instance = DAC1;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_DAC1_Init+0x60>)
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_DAC1_Init+0x64>)
 80003b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK){
 80003b8:	4811      	ldr	r0, [pc, #68]	; (8000400 <MX_DAC1_Init+0x60>)
 80003ba:	f001 fe08 	bl	8001fce <HAL_DAC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_DAC1_Init+0x28>
    Error_Handler();
 80003c4:	f000 f980 	bl	80006c8 <Error_Handler>
  }

  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80003cc:	2324      	movs	r3, #36	; 0x24
 80003ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_USER;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
  sConfig.DAC_TrimmingValue = 1;
 80003dc:	2301      	movs	r3, #1
 80003de:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK){
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	4619      	mov	r1, r3
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <MX_DAC1_Init+0x60>)
 80003e8:	f001 fefe 	bl	80021e8 <HAL_DAC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_DAC1_Init+0x56>
    Error_Handler();
 80003f2:	f000 f969 	bl	80006c8 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	; 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028
 8000404:	40007400 	.word	0x40007400

08000408 <MX_TIM1_Init>:

static void MX_TIM1_Init(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	b09a      	sub	sp, #104	; 0x68
 800040c:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
 800043a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	222c      	movs	r2, #44	; 0x2c
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f004 fc68 	bl	8004d18 <memset>

  htim1.Instance = TIM1;
 8000448:	4b43      	ldr	r3, [pc, #268]	; (8000558 <MX_TIM1_Init+0x150>)
 800044a:	4a44      	ldr	r2, [pc, #272]	; (800055c <MX_TIM1_Init+0x154>)
 800044c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800044e:	4b42      	ldr	r3, [pc, #264]	; (8000558 <MX_TIM1_Init+0x150>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b40      	ldr	r3, [pc, #256]	; (8000558 <MX_TIM1_Init+0x150>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 655;
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <MX_TIM1_Init+0x150>)
 800045c:	f240 228f 	movw	r2, #655	; 0x28f
 8000460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <MX_TIM1_Init+0x150>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <MX_TIM1_Init+0x150>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046e:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <MX_TIM1_Init+0x150>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK){
 8000474:	4838      	ldr	r0, [pc, #224]	; (8000558 <MX_TIM1_Init+0x150>)
 8000476:	f003 fcf5 	bl	8003e64 <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8000480:	f000 f922 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK){
 800048a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800048e:	4619      	mov	r1, r3
 8000490:	4831      	ldr	r0, [pc, #196]	; (8000558 <MX_TIM1_Init+0x150>)
 8000492:	f003 fefd 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x98>
    Error_Handler();
 800049c:	f000 f914 	bl	80006c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK){
 80004a0:	482d      	ldr	r0, [pc, #180]	; (8000558 <MX_TIM1_Init+0x150>)
 80004a2:	f003 fd83 	bl	8003fac <HAL_TIM_PWM_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0xa8>
    Error_Handler();
 80004ac:	f000 f90c 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004b0:	2320      	movs	r3, #32
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK){
 80004bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c0:	4619      	mov	r1, r3
 80004c2:	4825      	ldr	r0, [pc, #148]	; (8000558 <MX_TIM1_Init+0x150>)
 80004c4:	f004 fb26 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0xca>
    Error_Handler();
 80004ce:	f000 f8fb 	bl	80006c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d2:	2360      	movs	r3, #96	; 0x60
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004da:	2300      	movs	r3, #0
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004de:	2300      	movs	r3, #0
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){
 80004ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f2:	2200      	movs	r2, #0
 80004f4:	4619      	mov	r1, r3
 80004f6:	4818      	ldr	r0, [pc, #96]	; (8000558 <MX_TIM1_Init+0x150>)
 80004f8:	f003 fdba 	bl	8004070 <HAL_TIM_PWM_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM1_Init+0xfe>
    Error_Handler();
 8000502:	f000 f8e1 	bl	80006c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK){
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM1_Init+0x150>)
 800053c:	f004 fb50 	bl	8004be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x142>
    Error_Handler();
 8000546:	f000 f8bf 	bl	80006c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM1_Init+0x150>)
 800054c:	f000 fa1a 	bl	8000984 <HAL_TIM_MspPostInit>
}
 8000550:	bf00      	nop
 8000552:	3768      	adds	r7, #104	; 0x68
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000130 	.word	0x20000130
 800055c:	40012c00 	.word	0x40012c00

08000560 <MX_TIM2_Init>:


static void MX_TIM2_Init(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	b08e      	sub	sp, #56	; 0x38
 8000564:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_TIM2_Init+0xe8>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_TIM2_Init+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1310;
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005a8:	f240 521e 	movw	r2, #1310	; 0x51e
 80005ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK){
 80005ba:	4823      	ldr	r0, [pc, #140]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005bc:	f003 fc52 	bl	8003e64 <HAL_TIM_Base_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x6a>
    Error_Handler();
 80005c6:	f000 f87f 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK){
 80005d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d4:	4619      	mov	r1, r3
 80005d6:	481c      	ldr	r0, [pc, #112]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005d8:	f003 fe5a 	bl	8004290 <HAL_TIM_ConfigClockSource>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x86>
    Error_Handler();
 80005e2:	f000 f871 	bl	80006c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK){
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <MX_TIM2_Init+0xe8>)
 80005e8:	f003 fce0 	bl	8003fac <HAL_TIM_PWM_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x96>
    Error_Handler();
 80005f2:	f000 f869 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005f6:	2320      	movs	r3, #32
 80005f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK){
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <MX_TIM2_Init+0xe8>)
 8000606:	f004 fa85 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0xb4>
    Error_Handler();
 8000610:	f000 f85a 	bl	80006c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK){
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <MX_TIM2_Init+0xe8>)
 800062c:	f003 fd20 	bl	8004070 <HAL_TIM_PWM_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0xda>
    Error_Handler();
 8000636:	f000 f847 	bl	80006c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <MX_TIM2_Init+0xe8>)
 800063c:	f000 f9a2 	bl	8000984 <HAL_TIM_MspPostInit>
}
 8000640:	bf00      	nop
 8000642:	3738      	adds	r7, #56	; 0x38
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000037c 	.word	0x2000037c

0800064c <MX_DMA_Init>:

static void MX_DMA_Init(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_DMA_Init+0x48>)
 8000654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_DMA_Init+0x48>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6493      	str	r3, [r2, #72]	; 0x48
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_DMA_Init+0x48>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200b      	movs	r0, #11
 8000670:	f001 fc77 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000674:	200b      	movs	r0, #11
 8000676:	f001 fc90 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200d      	movs	r0, #13
 8000680:	f001 fc6f 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000684:	200d      	movs	r0, #13
 8000686:	f001 fc88 	bl	8001f9a <HAL_NVIC_EnableIRQ>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:

static void MX_GPIO_Init(void){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_GPIO_Init+0x2c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <Error_Handler>:


void Error_Handler(void){
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  __disable_irq();
  while (1){
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09e      	sub	sp, #120	; 0x78
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2254      	movs	r2, #84	; 0x54
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f004 faeb 	bl	8004d18 <memset>
  if(hadc->Instance==ADC1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a3b      	ldr	r2, [pc, #236]	; (8000834 <HAL_ADC_MspInit+0x118>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d16f      	bne.n	800082c <HAL_ADC_MspInit+0x110>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800074c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000750:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000756:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000764:	2307      	movs	r3, #7
 8000766:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f88c 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000786:	f7ff ff9f 	bl	80006c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a2a      	ldr	r2, [pc, #168]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 8000790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <HAL_ADC_MspInit+0x11c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007be:	230b      	movs	r3, #11
 80007c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f002 f8a6 	bl	8002920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007d6:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_ADC_MspInit+0x124>)
 80007d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_ADC_MspInit+0x120>)
 80007fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000800:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_ADC_MspInit+0x120>)
 8000804:	2220      	movs	r2, #32
 8000806:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_ADC_MspInit+0x120>)
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_ADC_MspInit+0x120>)
 8000812:	f001 fe8d 	bl	8002530 <HAL_DMA_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 800081c:	f7ff ff54 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_ADC_MspInit+0x120>)
 8000824:	64da      	str	r2, [r3, #76]	; 0x4c
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <HAL_ADC_MspInit+0x120>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3778      	adds	r7, #120	; 0x78
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	50040000 	.word	0x50040000
 8000838:	40021000 	.word	0x40021000
 800083c:	200000e8 	.word	0x200000e8
 8000840:	40020008 	.word	0x40020008

08000844 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <HAL_DAC_MspInit+0xcc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d150      	bne.n	8000908 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 800086c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <HAL_DAC_MspInit+0xd0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000896:	2310      	movs	r3, #16
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f002 f838 	bl	8002920 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <HAL_DAC_MspInit+0xd8>)
 80008b4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008b8:	2206      	movs	r2, #6
 80008ba:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008be:	2210      	movs	r2, #16
 80008c0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008dc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 80008ee:	f001 fe1f 	bl	8002530 <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80008f8:	f7ff fee6 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <HAL_DAC_MspInit+0xd4>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40007400 	.word	0x40007400
 8000914:	40021000 	.word	0x40021000
 8000918:	2000003c 	.word	0x2000003c
 800091c:	40020030 	.word	0x40020030

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_TIM_Base_MspInit+0x5c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10c      	bne.n	800094c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 8000938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800094a:	e010      	b.n	800096e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000954:	d10b      	bne.n	800096e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_TIM_Base_MspInit+0x60>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40012c00 	.word	0x40012c00
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_TIM_MspPostInit+0xac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11e      	bne.n	80009e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f001 ff9f 	bl	8002920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e2:	e021      	b.n	8000a28 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d11c      	bne.n	8000a28 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_TIM_MspPostInit+0xb0>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a16:	2301      	movs	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f001 ff7c 	bl	8002920 <HAL_GPIO_Init>
}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40012c00 	.word	0x40012c00
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f8c6 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Channel1_IRQHandler+0x10>)
 8000a92:	f001 fe65 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e8 	.word	0x200000e8

08000aa0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <DMA1_Channel3_IRQHandler+0x10>)
 8000aa6:	f001 fe5b 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000003c 	.word	0x2000003c

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <SystemInit+0x5c>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <SystemInit+0x5c>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <SystemInit+0x60>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <SystemInit+0x60>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <SystemInit+0x60>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <SystemInit+0x60>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <SystemInit+0x60>)
 8000ae0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ae4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <SystemInit+0x60>)
 8000aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <SystemInit+0x60>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <SystemInit+0x60>)
 8000af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SystemInit+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00
 8000b14:	40021000 	.word	0x40021000

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffca 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
	ldr	r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <LoopForever+0x16>)
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f004 f8c3 	bl	8004cd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fb3f 	bl	80001cc <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b54:	08004d88 	.word	0x08004d88
	ldr	r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b64:	200003cc 	.word	0x200003cc

08000b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_IRQHandler>

08000b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f001 f9e9 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f80e 	bl	8000b9c <HAL_InitTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8c:	f7ff fda2 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d023      	beq.n	8000bf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_InitTick+0x70>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f9f5 	bl	8001fb6 <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10f      	bne.n	8000bf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d809      	bhi.n	8000bec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f001 f9bf 	bl	8001f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_InitTick+0x74>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e001      	b.n	8000bfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	200003c8 	.word	0x200003c8

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200003c8 	.word	0x200003c8

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3360      	adds	r3, #96	; 0x60
 8000d16:	461a      	mov	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <LL_ADC_SetOffset+0x44>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	4313      	orrs	r3, r2
 8000d34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d3c:	bf00      	nop
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	03fff000 	.word	0x03fff000

08000d4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3360      	adds	r3, #96	; 0x60
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3360      	adds	r3, #96	; 0x60
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000da2:	bf00      	nop
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3330      	adds	r3, #48	; 0x30
 8000de4:	461a      	mov	r2, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	4413      	add	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	211f      	movs	r1, #31
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	0e9b      	lsrs	r3, r3, #26
 8000e0c:	f003 011f 	and.w	r1, r3, #31
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e20:	bf00      	nop
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3314      	adds	r3, #20
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	0e5b      	lsrs	r3, r3, #25
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	4413      	add	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	0d1b      	lsrs	r3, r3, #20
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	2107      	movs	r1, #7
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	401a      	ands	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	0d1b      	lsrs	r3, r3, #20
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0318 	and.w	r3, r3, #24
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ea8:	40d9      	lsrs	r1, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	400b      	ands	r3, r1
 8000eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	0007ffff 	.word	0x0007ffff

08000ecc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6093      	str	r3, [r2, #8]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f54:	d101      	bne.n	8000f5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <LL_ADC_IsEnabled+0x18>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <LL_ADC_IsEnabled+0x1a>
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fca:	f043 0204 	orr.w	r2, r3, #4
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	2b08      	cmp	r3, #8
 8001016:	d101      	bne.n	800101c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e12c      	b.n	80012a0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fb61 	bl	800071c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff3f 	bl	8000ef0 <LL_ADC_IsDeepPowerDownEnabled>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff25 	bl	8000ecc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff5a 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d115      	bne.n	80010be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff3e 	bl	8000f18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800109c:	4b82      	ldr	r3, [pc, #520]	; (80012a8 <HAL_ADC_Init+0x27c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	099b      	lsrs	r3, r3, #6
 80010a2:	4a82      	ldr	r2, [pc, #520]	; (80012ac <HAL_ADC_Init+0x280>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	099b      	lsrs	r3, r3, #6
 80010aa:	3301      	adds	r3, #1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f9      	bne.n	80010b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff3c 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10d      	bne.n	80010ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d2:	f043 0210 	orr.w	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff75 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80010f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 80c5 	bne.w	800128e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80c1 	bne.w	800128e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001114:	f043 0202 	orr.w	r2, r3, #2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff35 	bl	8000f90 <LL_ADC_IsEnabled>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800112c:	4860      	ldr	r0, [pc, #384]	; (80012b0 <HAL_ADC_Init+0x284>)
 800112e:	f7ff ff2f 	bl	8000f90 <LL_ADC_IsEnabled>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4619      	mov	r1, r3
 800113e:	485d      	ldr	r0, [pc, #372]	; (80012b4 <HAL_ADC_Init+0x288>)
 8001140:	f7ff fdac 	bl	8000c9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7e5b      	ldrb	r3, [r3, #25]
 8001148:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800114e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001154:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800115a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001162:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d106      	bne.n	8001180 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	3b01      	subs	r3, #1
 8001178:	045b      	lsls	r3, r3, #17
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_ADC_Init+0x28c>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	430b      	orrs	r3, r1
 80011ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff12 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80011ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff1f 	bl	8001004 <LL_ADC_INJ_IsConversionOngoing>
 80011c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d13d      	bne.n	800124a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d13a      	bne.n	800124a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	69b9      	ldr	r1, [r7, #24]
 80011fa:	430b      	orrs	r3, r1
 80011fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001204:	2b01      	cmp	r3, #1
 8001206:	d118      	bne.n	800123a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800121e:	4311      	orrs	r1, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001224:	4311      	orrs	r1, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800122a:	430a      	orrs	r2, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	e007      	b.n	800124a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10c      	bne.n	800126c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f023 010f 	bic.w	r1, r3, #15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	e007      	b.n	800127c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020f 	bic.w	r2, r2, #15
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
 800128c:	e007      	b.n	800129e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800129e:	7ffb      	ldrb	r3, [r7, #31]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000000 	.word	0x20000000
 80012ac:	053e2d63 	.word	0x053e2d63
 80012b0:	50040000 	.word	0x50040000
 80012b4:	50040300 	.word	0x50040300
 80012b8:	fff0c007 	.word	0xfff0c007

080012bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe86 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d167      	bne.n	80013a8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x2a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e063      	b.n	80013ae <HAL_ADC_Start_DMA+0xf2>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fc66 	bl	8001bc0 <ADC_Enable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d14f      	bne.n	800139e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f023 0206 	bic.w	r2, r3, #6
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
 800132a:	e002      	b.n	8001332 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <HAL_ADC_Start_DMA+0xfc>)
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_ADC_Start_DMA+0x100>)
 8001340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <HAL_ADC_Start_DMA+0x104>)
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	221c      	movs	r2, #28
 8001350:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0210 	orr.w	r2, r2, #16
 8001368:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3340      	adds	r3, #64	; 0x40
 8001384:	4619      	mov	r1, r3
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f001 f989 	bl	80026a0 <HAL_DMA_Start_IT>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe0d 	bl	8000fb6 <LL_ADC_REG_StartConversion>
 800139c:	e006      	b.n	80013ac <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013a6:	e001      	b.n	80013ac <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013a8:	2302      	movs	r3, #2
 80013aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	08001c85 	.word	0x08001c85
 80013bc:	08001d5d 	.word	0x08001d5d
 80013c0:	08001d79 	.word	0x08001d79

080013c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0b6      	sub	sp, #216	; 0xd8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x22>
 800141e:	2302      	movs	r3, #2
 8001420:	e3b9      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x796>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fdd5 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 839e 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d824      	bhi.n	800148e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	3b02      	subs	r3, #2
 800144a:	2b03      	cmp	r3, #3
 800144c:	d81b      	bhi.n	8001486 <HAL_ADC_ConfigChannel+0x86>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <HAL_ADC_ConfigChannel+0x54>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	08001465 	.word	0x08001465
 8001458:	0800146d 	.word	0x0800146d
 800145c:	08001475 	.word	0x08001475
 8001460:	0800147d 	.word	0x0800147d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	220c      	movs	r2, #12
 8001468:	605a      	str	r2, [r3, #4]
          break;
 800146a:	e011      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2212      	movs	r2, #18
 8001470:	605a      	str	r2, [r3, #4]
          break;
 8001472:	e00d      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2218      	movs	r2, #24
 8001478:	605a      	str	r2, [r3, #4]
          break;
 800147a:	e009      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	605a      	str	r2, [r3, #4]
          break;
 8001484:	e004      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2206      	movs	r2, #6
 800148a:	605a      	str	r2, [r3, #4]
          break;
 800148c:	e000      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800148e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	f7ff fc99 	bl	8000dd4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fd99 	bl	8000fde <LL_ADC_REG_IsConversionOngoing>
 80014ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fda5 	bl	8001004 <LL_ADC_INJ_IsConversionOngoing>
 80014ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 81a6 	bne.w	8001814 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 81a1 	bne.w	8001814 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff fca4 	bl	8000e2c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b04      	cmp	r3, #4
 8001504:	d00a      	beq.n	800151c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6919      	ldr	r1, [r3, #16]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001516:	f7ff fbf5 	bl	8000d04 <LL_ADC_SetOffset>
 800151a:	e17b      	b.n	8001814 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc12 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x148>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc07 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	0e9b      	lsrs	r3, r3, #26
 8001542:	f003 021f 	and.w	r2, r3, #31
 8001546:	e01e      	b.n	8001586 <HAL_ADC_ConfigChannel+0x186>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fbfc 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800156a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800156e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001576:	2320      	movs	r3, #32
 8001578:	e004      	b.n	8001584 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800157a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_ConfigChannel+0x19e>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0e9b      	lsrs	r3, r3, #26
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	e018      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e004      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fbcb 	bl	8000d78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fbaf 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_ADC_ConfigChannel+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fba4 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	0e9b      	lsrs	r3, r3, #26
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	e01e      	b.n	800164c <HAL_ADC_ConfigChannel+0x24c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fb99 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800162c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	e004      	b.n	800164a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x264>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0e9b      	lsrs	r3, r3, #26
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	e018      	b.n	8001696 <HAL_ADC_ConfigChannel+0x296>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800167c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001688:	2320      	movs	r3, #32
 800168a:	e004      	b.n	8001696 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800168c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001696:	429a      	cmp	r2, r3
 8001698:	d106      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb68 	bl	8000d78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb4c 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10a      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x2d4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2102      	movs	r1, #2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb41 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	e01e      	b.n	8001712 <HAL_ADC_ConfigChannel+0x312>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fb36 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80016f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80016fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e004      	b.n	8001710 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_ADC_ConfigChannel+0x32a>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	e016      	b.n	8001758 <HAL_ADC_ConfigChannel+0x358>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800173c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800174a:	2320      	movs	r3, #32
 800174c:	e004      	b.n	8001758 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800174e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001758:	429a      	cmp	r2, r3
 800175a:	d106      	bne.n	800176a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	2102      	movs	r1, #2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fb07 	bl	8000d78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2103      	movs	r1, #3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff faeb 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x396>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2103      	movs	r1, #3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fae0 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	0e9b      	lsrs	r3, r3, #26
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	e017      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x3c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2103      	movs	r1, #3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fad5 	bl	8000d4c <LL_ADC_GetOffsetChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e003      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_ADC_ConfigChannel+0x3de>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	e011      	b.n	8001802 <HAL_ADC_ConfigChannel+0x402>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80017f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e003      	b.n	8001802 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	2103      	movs	r1, #3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fab2 	bl	8000d78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fbb9 	bl	8000f90 <LL_ADC_IsEnabled>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 813f 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	f7ff fb26 	bl	8000e84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a8e      	ldr	r2, [pc, #568]	; (8001a78 <HAL_ADC_ConfigChannel+0x678>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 8130 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <HAL_ADC_ConfigChannel+0x46c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	3301      	adds	r3, #1
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b09      	cmp	r3, #9
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e019      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x4a0>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800187a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800187e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e003      	b.n	8001890 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2b09      	cmp	r3, #9
 8001898:	bf94      	ite	ls
 800189a:	2301      	movls	r3, #1
 800189c:	2300      	movhi	r3, #0
 800189e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d079      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x4c0>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	3301      	adds	r3, #1
 80018b8:	069b      	lsls	r3, r3, #26
 80018ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018be:	e015      	b.n	80018ec <HAL_ADC_ConfigChannel+0x4ec>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018d8:	2320      	movs	r3, #32
 80018da:	e003      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	069b      	lsls	r3, r3, #26
 80018e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_ADC_ConfigChannel+0x50c>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	3301      	adds	r3, #1
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	e017      	b.n	800193c <HAL_ADC_ConfigChannel+0x53c>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	e003      	b.n	8001930 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x562>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	3301      	adds	r3, #1
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	051b      	lsls	r3, r3, #20
 8001960:	e018      	b.n	8001994 <HAL_ADC_ConfigChannel+0x594>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e003      	b.n	8001986 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001994:	430b      	orrs	r3, r1
 8001996:	e080      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x5b4>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	3301      	adds	r3, #1
 80019ac:	069b      	lsls	r3, r3, #26
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	e015      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x5e0>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e003      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x600>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	3301      	adds	r3, #1
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	e017      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x630>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	ea42 0103 	orr.w	r1, r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x65c>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e9b      	lsrs	r3, r3, #26
 8001a46:	3301      	adds	r3, #1
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	051b      	lsls	r3, r3, #20
 8001a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	e01d      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x698>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	613b      	str	r3, [r7, #16]
  return result;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e005      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x684>
 8001a78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	051b      	lsls	r3, r3, #20
 8001a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6892      	ldr	r2, [r2, #8]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f9c4 	bl	8000e2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_ADC_ConfigChannel+0x7a0>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d06c      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab0:	483c      	ldr	r0, [pc, #240]	; (8001ba4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ab2:	f7ff f919 	bl	8000ce8 <LL_ADC_GetCommonPathInternalCh>
 8001ab6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a3a      	ldr	r2, [pc, #232]	; (8001ba8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d127      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d121      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a35      	ldr	r2, [pc, #212]	; (8001bac <HAL_ADC_ConfigChannel+0x7ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d157      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482f      	ldr	r0, [pc, #188]	; (8001ba4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ae6:	f7ff f8ec 	bl	8000cc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f9      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b12:	e03a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d113      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x746>
 8001b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_ADC_ConfigChannel+0x7ac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d12a      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4819      	ldr	r0, [pc, #100]	; (8001ba4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b40:	f7ff f8bf 	bl	8000cc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b44:	e021      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_ADC_ConfigChannel+0x7bc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d11c      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d116      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HAL_ADC_ConfigChannel+0x7ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b72:	f7ff f8a6 	bl	8000cc2 <LL_ADC_SetCommonPathInternalCh>
 8001b76:	e008      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	37d8      	adds	r7, #216	; 0xd8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	80080000 	.word	0x80080000
 8001ba4:	50040300 	.word	0x50040300
 8001ba8:	c7520000 	.word	0xc7520000
 8001bac:	50040000 	.word	0x50040000
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	053e2d63 	.word	0x053e2d63
 8001bb8:	cb840000 	.word	0xcb840000
 8001bbc:	80000001 	.word	0x80000001

08001bc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f9df 	bl	8000f90 <LL_ADC_IsEnabled>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d14d      	bne.n	8001c74 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <ADC_Enable+0xc0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e039      	b.n	8001c76 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f9ae 	bl	8000f68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff f816 	bl	8000c3c <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c12:	e028      	b.n	8001c66 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f9b9 	bl	8000f90 <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d104      	bne.n	8001c2e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f99d 	bl	8000f68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c2e:	f7ff f805 	bl	8000c3c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d914      	bls.n	8001c66 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d00d      	beq.n	8001c66 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d1cf      	bne.n	8001c14 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	8000003f 	.word	0x8000003f

08001c84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d14b      	bne.n	8001d36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d021      	beq.n	8001cfc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f876 	bl	8000dae <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d12b      	bne.n	8001d2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d11f      	bne.n	8001d2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
 8001cfa:	e018      	b.n	8001d2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d111      	bne.n	8001d2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fb48 	bl	80013c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d34:	e00e      	b.n	8001d54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fb52 	bl	80013ec <HAL_ADC_ErrorCallback>
}
 8001d48:	e004      	b.n	8001d54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fb34 	bl	80013d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f043 0204 	orr.w	r2, r3, #4
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fb24 	bl	80013ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff3e 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff31 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e014      	b.n	800200a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7fe fc27 	bl	8000844 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	795b      	ldrb	r3, [r3, #5]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_DAC_Start_DMA+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e0ab      	b.n	800218a <HAL_DAC_Start_DMA+0x176>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2202      	movs	r2, #2
 800203c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d12f      	bne.n	80020a4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_DAC_Start_DMA+0x180>)
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_DAC_Start_DMA+0x184>)
 8002052:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_DAC_Start_DMA+0x188>)
 800205a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800206a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d013      	beq.n	800209a <HAL_DAC_Start_DMA+0x86>
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d845      	bhi.n	8002104 <HAL_DAC_Start_DMA+0xf0>
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_DAC_Start_DMA+0x72>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d005      	beq.n	8002090 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002084:	e03e      	b.n	8002104 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3308      	adds	r3, #8
 800208c:	613b      	str	r3, [r7, #16]
        break;
 800208e:	e03c      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	613b      	str	r3, [r7, #16]
        break;
 8002098:	e037      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3310      	adds	r3, #16
 80020a0:	613b      	str	r3, [r7, #16]
        break;
 80020a2:	e032      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a3d      	ldr	r2, [pc, #244]	; (80021a0 <HAL_DAC_Start_DMA+0x18c>)
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_DAC_Start_DMA+0x190>)
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_DAC_Start_DMA+0x194>)
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020ca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d013      	beq.n	80020fa <HAL_DAC_Start_DMA+0xe6>
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d817      	bhi.n	8002108 <HAL_DAC_Start_DMA+0xf4>
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_DAC_Start_DMA+0xd2>
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d005      	beq.n	80020f0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80020e4:	e010      	b.n	8002108 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3314      	adds	r3, #20
 80020ec:	613b      	str	r3, [r7, #16]
        break;
 80020ee:	e00c      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3318      	adds	r3, #24
 80020f6:	613b      	str	r3, [r7, #16]
        break;
 80020f8:	e007      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	331c      	adds	r3, #28
 8002100:	613b      	str	r3, [r7, #16]
        break;
 8002102:	e002      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002108:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d111      	bne.n	8002134 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6898      	ldr	r0, [r3, #8]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	f000 fab9 	bl	80026a0 <HAL_DMA_Start_IT>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
 8002132:	e010      	b.n	8002156 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002142:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68d8      	ldr	r0, [r3, #12]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	f000 faa7 	bl	80026a0 <HAL_DMA_Start_IT>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e005      	b.n	8002188 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	0800241d 	.word	0x0800241d
 8002198:	0800243f 	.word	0x0800243f
 800219c:	0800245b 	.word	0x0800245b
 80021a0:	080024c5 	.word	0x080024c5
 80021a4:	080024e7 	.word	0x080024e7
 80021a8:	08002503 	.word	0x08002503

080021ac <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_ConfigChannel+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e107      	b.n	8002414 <HAL_DAC_ConfigChannel+0x22c>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d174      	bne.n	8002302 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002218:	f7fe fd10 	bl	8000c3c <HAL_GetTick>
 800221c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d134      	bne.n	800228e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002224:	e011      	b.n	800224a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002226:	f7fe fd09 	bl	8000c3c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d90a      	bls.n	800224a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f043 0208 	orr.w	r2, r3, #8
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2203      	movs	r2, #3
 8002244:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0e4      	b.n	8002414 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e6      	bne.n	8002226 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe fcfb 	bl	8000c54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	6992      	ldr	r2, [r2, #24]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	e01e      	b.n	80022a8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800226a:	f7fe fce7 	bl	8000c3c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d90a      	bls.n	800228e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f043 0208 	orr.w	r2, r3, #8
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2203      	movs	r2, #3
 8002288:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0c2      	b.n	8002414 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	2b00      	cmp	r3, #0
 8002296:	dbe8      	blt.n	800226a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe fcdb 	bl	8000c54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	6992      	ldr	r2, [r2, #24]
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	ea02 0103 	and.w	r1, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	21ff      	movs	r1, #255	; 0xff
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	ea02 0103 	and.w	r1, r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	409a      	lsls	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d11d      	bne.n	8002346 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2207      	movs	r2, #7
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	431a      	orrs	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	f640 72fc 	movw	r2, #4092	; 0xffc
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	22c0      	movs	r2, #192	; 0xc0
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43da      	mvns	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff febe 	bl	80021ac <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	711a      	strb	r2, [r3, #4]
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff feb7 	bl	80021c0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fead 	bl	80021d4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	711a      	strb	r2, [r3, #4]
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ffd8 	bl	8002488 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	711a      	strb	r2, [r3, #4]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff ffd1 	bl	800249c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f043 0204 	orr.w	r2, r3, #4
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff ffc7 	bl	80024b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	711a      	strb	r2, [r3, #4]
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e098      	b.n	8002674 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_DMA_Init+0x150>)
 800254a:	429a      	cmp	r2, r3
 800254c:	d80f      	bhi.n	800256e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_DMA_Init+0x154>)
 8002556:	4413      	add	r3, r2
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_DMA_Init+0x158>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	009a      	lsls	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <HAL_DMA_Init+0x15c>)
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
 800256c:	e00e      	b.n	800258c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_DMA_Init+0x160>)
 8002576:	4413      	add	r3, r2
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_DMA_Init+0x158>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_DMA_Init+0x164>)
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e6:	d039      	beq.n	800265c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_DMA_Init+0x15c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d11a      	bne.n	8002628 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_DMA_Init+0x168>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	210f      	movs	r1, #15
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4924      	ldr	r1, [pc, #144]	; (8002698 <HAL_DMA_Init+0x168>)
 8002608:	4013      	ands	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_DMA_Init+0x168>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f003 031c 	and.w	r3, r3, #28
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	491d      	ldr	r1, [pc, #116]	; (8002698 <HAL_DMA_Init+0x168>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	e019      	b.n	800265c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <HAL_DMA_Init+0x16c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	210f      	movs	r1, #15
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4917      	ldr	r1, [pc, #92]	; (800269c <HAL_DMA_Init+0x16c>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_DMA_Init+0x16c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f003 031c 	and.w	r3, r3, #28
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_DMA_Init+0x16c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40020407 	.word	0x40020407
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	40020000 	.word	0x40020000
 8002690:	bffdfbf8 	.word	0xbffdfbf8
 8002694:	40020400 	.word	0x40020400
 8002698:	400200a8 	.word	0x400200a8
 800269c:	400204a8 	.word	0x400204a8

080026a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Start_IT+0x20>
 80026bc:	2302      	movs	r3, #2
 80026be:	e04b      	b.n	8002758 <HAL_DMA_Start_IT+0xb8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d13a      	bne.n	800274a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8e0 	bl	80028be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 020e 	orr.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00f      	b.n	8002738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 020a 	orr.w	r2, r2, #10
 8002736:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002752:	2302      	movs	r3, #2
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f003 031c 	and.w	r3, r3, #28
 8002780:	2204      	movs	r2, #4
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d026      	beq.n	80027da <HAL_DMA_IRQHandler+0x7a>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d021      	beq.n	80027da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f003 021c 	and.w	r2, r3, #28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2104      	movs	r1, #4
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d071      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027d8:	e06c      	b.n	80028b4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 031c 	and.w	r3, r3, #28
 80027e2:	2202      	movs	r2, #2
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <HAL_DMA_IRQHandler+0xec>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d029      	beq.n	800284c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020a 	bic.w	r2, r2, #10
 8002814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 021c 	and.w	r2, r3, #28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2102      	movs	r1, #2
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d038      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800284a:	e033      	b.n	80028b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f003 031c 	and.w	r3, r3, #28
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02a      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d025      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 020e 	bic.w	r2, r2, #14
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f003 021c 	and.w	r2, r3, #28
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
}
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 021c 	and.w	r2, r3, #28
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d108      	bne.n	8002902 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002900:	e007      	b.n	8002912 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292e:	e148      	b.n	8002bc2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 813a 	beq.w	8002bbc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d00b      	beq.n	8002968 <HAL_GPIO_Init+0x48>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800295c:	2b11      	cmp	r3, #17
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b12      	cmp	r3, #18
 8002966:	d130      	bne.n	80029ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800299e:	2201      	movs	r2, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 0201 	and.w	r2, r3, #1
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0xea>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d123      	bne.n	8002a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	6939      	ldr	r1, [r7, #16]
 8002a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8094 	beq.w	8002bbc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_GPIO_Init+0x2c0>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	4a51      	ldr	r2, [pc, #324]	; (8002be0 <HAL_GPIO_Init+0x2c0>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <HAL_GPIO_Init+0x2c0>)
 8002aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aac:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <HAL_GPIO_Init+0x2c4>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad6:	d00d      	beq.n	8002af4 <HAL_GPIO_Init+0x1d4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <HAL_GPIO_Init+0x2c8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <HAL_GPIO_Init+0x1d0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a42      	ldr	r2, [pc, #264]	; (8002bec <HAL_GPIO_Init+0x2cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_GPIO_Init+0x1cc>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x1d6>
 8002aec:	2307      	movs	r3, #7
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x1d6>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x1d6>
 8002af4:	2300      	movs	r3, #0
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b06:	4937      	ldr	r1, [pc, #220]	; (8002be4 <HAL_GPIO_Init+0x2c4>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b38:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b62:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f47f aeaf 	bne.w	8002930 <HAL_GPIO_Init+0x10>
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010000 	.word	0x40010000
 8002be8:	48000400 	.word	0x48000400
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d130      	bne.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d038      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c36:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2232      	movs	r2, #50	; 0x32
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	3301      	adds	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c54:	e002      	b.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d102      	bne.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f2      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d110      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00f      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d007      	beq.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f000 bc11 	b.w	80034f2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd0:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cda:	4b9e      	ldr	r3, [pc, #632]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80e4 	beq.w	8002eba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4c>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	f040 808b 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 8087 	bne.w	8002e16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d08:	4b92      	ldr	r3, [pc, #584]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x64>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e3e8      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCC_OscConfig+0x7e>
 8002d30:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_OscConfig+0x8a>
 8002d3a:	4b86      	ldr	r3, [pc, #536]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d223      	bcs.n	8002d92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd42 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3c9      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5e:	4b7d      	ldr	r3, [pc, #500]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7c      	ldr	r2, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b7a      	ldr	r3, [pc, #488]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4977      	ldr	r1, [pc, #476]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7c:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	4972      	ldr	r1, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
 8002d90:	e025      	b.n	8002dde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d92:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6f      	ldr	r2, [pc, #444]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	496a      	ldr	r1, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db0:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	4965      	ldr	r1, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd02 	bl	80037d8 <RCC_SetFlashLatencyFromMSIRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e389      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dde:	f000 fc6f 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b5b      	ldr	r3, [pc, #364]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	495a      	ldr	r1, [pc, #360]	; (8002f58 <HAL_RCC_OscConfig+0x29c>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_OscConfig+0x2a0>)
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dfe:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <HAL_RCC_OscConfig+0x2a4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd feca 	bl	8000b9c <HAL_InitTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d052      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	e36d      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d032      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4c      	ldr	r2, [pc, #304]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd ff07 	bl	8000c3c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e32:	f7fd ff03 	bl	8000c3c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e356      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e50:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3f      	ldr	r2, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	493a      	ldr	r1, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	e01a      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e84:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e90:	f7fd fed4 	bl	8000c3c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e98:	f7fd fed0 	bl	8000c3c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e323      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x1dc>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d073      	beq.n	8002fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x21c>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d063      	beq.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15f      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e300      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x24c>
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0x288>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x270>
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0x288>
 8002f2c:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_RCC_OscConfig+0x298>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fd fe76 	bl	8000c3c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	e010      	b.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08004d40 	.word	0x08004d40
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fd fe6a 	bl	8000c3c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e2bd      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	4baf      	ldr	r3, [pc, #700]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2a8>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fd fe5a 	bl	8000c3c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fd fe56 	bl	8000c3c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e2a9      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	4ba5      	ldr	r3, [pc, #660]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d0>
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d060      	beq.n	800307c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x310>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d116      	bne.n	8002ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b99      	ldr	r3, [pc, #612]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x328>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e286      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b93      	ldr	r3, [pc, #588]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4990      	ldr	r1, [pc, #576]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff8:	e040      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d023      	beq.n	800304a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003002:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a8b      	ldr	r2, [pc, #556]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fd fe15 	bl	8000c3c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003016:	f7fd fe11 	bl	8000c3c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e264      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b82      	ldr	r3, [pc, #520]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	497c      	ldr	r1, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b7a      	ldr	r3, [pc, #488]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a79      	ldr	r2, [pc, #484]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fdf1 	bl	8000c3c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd fded 	bl	8000c3c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e240      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03c      	beq.n	8003102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003090:	4b68      	ldr	r3, [pc, #416]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	4a67      	ldr	r2, [pc, #412]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fd fdcc 	bl	8000c3c <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd fdc8 	bl	8000c3c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e21b      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <HAL_RCC_OscConfig+0x3ec>
 80030c8:	e01b      	b.n	8003102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ca:	4b5a      	ldr	r3, [pc, #360]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fd fdaf 	bl	8000c3c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fd fdab 	bl	8000c3c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1fe      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a6 	beq.w	800325c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003114:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a43      	ldr	r2, [pc, #268]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_RCC_OscConfig+0x57c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d118      	bne.n	800317a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x57c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <HAL_RCC_OscConfig+0x57c>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fd fd72 	bl	8000c3c <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fd fd6e 	bl	8000c3c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e1c1      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b32      	ldr	r3, [pc, #200]	; (8003238 <HAL_RCC_OscConfig+0x57c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x4d8>
 8003182:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003192:	e024      	b.n	80031de <HAL_RCC_OscConfig+0x522>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d110      	bne.n	80031be <HAL_RCC_OscConfig+0x502>
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a20      	ldr	r2, [pc, #128]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031bc:	e00f      	b.n	80031de <HAL_RCC_OscConfig+0x522>
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fd29 	bl	8000c3c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fd25 	bl	8000c3c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e176      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x578>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ed      	beq.n	80031ee <HAL_RCC_OscConfig+0x532>
 8003212:	e01a      	b.n	800324a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fd fd12 	bl	8000c3c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321a:	e00f      	b.n	800323c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fd fd0e 	bl	8000c3c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d906      	bls.n	800323c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e15f      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800323c:	4baa      	ldr	r3, [pc, #680]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e8      	bne.n	800321c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4ba5      	ldr	r3, [pc, #660]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	4aa4      	ldr	r2, [pc, #656]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01c      	beq.n	80032aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003270:	4b9d      	ldr	r3, [pc, #628]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003276:	4a9c      	ldr	r2, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd fcdc 	bl	8000c3c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003288:	f7fd fcd8 	bl	8000c3c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e12b      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329a:	4b93      	ldr	r3, [pc, #588]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800329c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x5cc>
 80032a8:	e01b      	b.n	80032e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80032ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b0:	4a8d      	ldr	r2, [pc, #564]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd fcbf 	bl	8000c3c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c2:	f7fd fcbb 	bl	8000c3c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10e      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d4:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80032d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8102 	beq.w	80034f0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f040 80c5 	bne.w	8003480 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032f6:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	429a      	cmp	r2, r3
 8003308:	d12c      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	3b01      	subs	r3, #1
 8003316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d123      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d11b      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d113      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d109      	bne.n	8003364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d067      	beq.n	8003434 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d062      	beq.n	8003430 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0bb      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003386:	f7fd fc59 	bl	8000c3c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fd fc55 	bl	8000c3c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0a8      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b4e      	ldr	r3, [pc, #312]	; (80034ec <HAL_RCC_OscConfig+0x830>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033bc:	3a01      	subs	r2, #1
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0552      	lsls	r2, r2, #21
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	4311      	orrs	r1, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e6:	06d2      	lsls	r2, r2, #27
 80033e8:	430a      	orrs	r2, r1
 80033ea:	493f      	ldr	r1, [pc, #252]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033f0:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3c      	ldr	r2, [pc, #240]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003408:	f7fd fc18 	bl	8000c3c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd fc14 	bl	8000c3c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e067      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342e:	e05f      	b.n	80034f0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e05e      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003458:	f7fd fbf0 	bl	8000c3c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003460:	f7fd fbec 	bl	8000c3c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e03f      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x7a4>
 800347e:	e037      	b.n	80034f0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d02d      	beq.n	80034e2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 800348c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003490:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80034b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd fbbf 	bl	8000c3c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fd fbbb 	bl	8000c3c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e00e      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_RCC_OscConfig+0x82c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x806>
 80034e0:	e006      	b.n	80034f0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e005      	b.n	80034f2 <HAL_RCC_OscConfig+0x836>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0c8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4961      	ldr	r1, [pc, #388]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0b0      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d04c      	beq.n	80035e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d121      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e09e      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d115      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e092      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e086      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003594:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e07e      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 0203 	bic.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	493f      	ldr	r1, [pc, #252]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b6:	f7fd fb41 	bl	8000c3c <HAL_GetTick>
 80035ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035be:	f7fd fb3d 	bl	8000c3c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e066      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d4:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 020c 	and.w	r2, r3, #12
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d1eb      	bne.n	80035be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f2:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	492c      	ldr	r1, [pc, #176]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d210      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4924      	ldr	r1, [pc, #144]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x1b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e036      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4918      	ldr	r1, [pc, #96]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4910      	ldr	r1, [pc, #64]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003672:	f000 f825 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8003676:	4602      	mov	r2, r0
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_RCC_ClockConfig+0x1b4>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	490c      	ldr	r1, [pc, #48]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fa80 	bl	8000b9c <HAL_InitTick>
 800369c:	4603      	mov	r3, r0
 800369e:	72fb      	strb	r3, [r7, #11]

  return status;
 80036a0:	7afb      	ldrb	r3, [r7, #11]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08004d40 	.word	0x08004d40
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d8:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x34>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d121      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d11e      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e005      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800371c:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d102      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	e004      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d101      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003746:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d134      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0xa6>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xac>
 8003764:	e005      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003768:	617b      	str	r3, [r7, #20]
      break;
 800376a:	e005      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800376e:	617b      	str	r3, [r7, #20]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	fb02 f203 	mul.w	r2, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	0e5b      	lsrs	r3, r3, #25
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	3301      	adds	r3, #1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037b8:	69bb      	ldr	r3, [r7, #24]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08004d50 	.word	0x08004d50
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff fa00 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
 80037f6:	e014      	b.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b25      	ldr	r3, [pc, #148]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003810:	f7ff f9f0 	bl	8002bf4 <HAL_PWREx_GetVoltageRange>
 8003814:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d10b      	bne.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d919      	bls.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2ba0      	cmp	r3, #160	; 0xa0
 8003834:	d902      	bls.n	800383c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003836:	2302      	movs	r3, #2
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e013      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800383c:	2301      	movs	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	e010      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d902      	bls.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003848:	2303      	movs	r3, #3
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e00a      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d102      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003854:	2302      	movs	r3, #2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e004      	b.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d101      	bne.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003860:	2301      	movs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d001      	beq.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	40022000 	.word	0x40022000

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a4:	2300      	movs	r3, #0
 80038a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038bc:	d01a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c2:	d814      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038cc:	d10f      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038ce:	4bac      	ldr	r3, [pc, #688]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4aab      	ldr	r2, [pc, #684]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038da:	e00c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9cc 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	74fb      	strb	r3, [r7, #19]
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038fc:	4ba0      	ldr	r3, [pc, #640]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	499d      	ldr	r1, [pc, #628]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8099 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800392a:	4b95      	ldr	r3, [pc, #596]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	4a8e      	ldr	r2, [pc, #568]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6593      	str	r3, [r2, #88]	; 0x58
 800394c:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003958:	2301      	movs	r3, #1
 800395a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395c:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a88      	ldr	r2, [pc, #544]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003968:	f7fd f968 	bl	8000c3c <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7fd f964 	bl	8000c3c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	74fb      	strb	r3, [r7, #19]
        break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003984:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d155      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003996:	4b7a      	ldr	r3, [pc, #488]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01e      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d019      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b2:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	4a6e      	ldr	r2, [pc, #440]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039de:	4a68      	ldr	r2, [pc, #416]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd f924 	bl	8000c3c <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fd f920 	bl	8000c3c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d902      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a0e:	e006      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a10:	4b5b      	ldr	r3, [pc, #364]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ec      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a24:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	4953      	ldr	r1, [pc, #332]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a3a:	e004      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a46:	7c7b      	ldrb	r3, [r7, #17]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a64:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4943      	ldr	r1, [pc, #268]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a86:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f023 020c 	bic.w	r2, r3, #12
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	493a      	ldr	r1, [pc, #232]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aa8:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	4932      	ldr	r1, [pc, #200]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	4929      	ldr	r1, [pc, #164]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	4921      	ldr	r1, [pc, #132]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	4918      	ldr	r1, [pc, #96]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4910      	ldr	r1, [pc, #64]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02c      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b70:	d10a      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	4a02      	ldr	r2, [pc, #8]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7c:	60d3      	str	r3, [r2, #12]
 8003b7e:	e015      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f871 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bb8:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	492d      	ldr	r1, [pc, #180]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
 8003be4:	e011      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f842 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01c      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	4915      	ldr	r1, [pc, #84]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f81f 	bl	8003c80 <RCCEx_PLLSAI1_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	4904      	ldr	r1, [pc, #16]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c8e:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c9a:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d10d      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
       ||
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cb2:	4b6b      	ldr	r3, [pc, #428]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d047      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
 8003cca:	e044      	b.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d018      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0x86>
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d825      	bhi.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d002      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x62>
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d009      	beq.n	8003cf4 <RCCEx_PLLSAI1_Config+0x74>
 8003ce0:	e020      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ce2:	4b5f      	ldr	r3, [pc, #380]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11d      	bne.n	8003d2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf2:	e01a      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cf4:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e013      	b.n	8003d2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d22:	e006      	b.n	8003d32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e004      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10d      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	4943      	ldr	r1, [pc, #268]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d17c      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fc ff68 	bl	8000c3c <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d6e:	e009      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d70:	f7fc ff64 	bl	8000c3c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
        break;
 8003d82:	e005      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d84:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ef      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15f      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d110      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003da4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6892      	ldr	r2, [r2, #8]
 8003dac:	0211      	lsls	r1, r2, #8
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	06d2      	lsls	r2, r2, #27
 8003db4:	430a      	orrs	r2, r1
 8003db6:	492a      	ldr	r1, [pc, #168]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	610b      	str	r3, [r1, #16]
 8003dbc:	e027      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d112      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6892      	ldr	r2, [r2, #8]
 8003dd4:	0211      	lsls	r1, r2, #8
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6912      	ldr	r2, [r2, #16]
 8003dda:	0852      	lsrs	r2, r2, #1
 8003ddc:	3a01      	subs	r2, #1
 8003dde:	0552      	lsls	r2, r2, #21
 8003de0:	430a      	orrs	r2, r1
 8003de2:	491f      	ldr	r1, [pc, #124]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	610b      	str	r3, [r1, #16]
 8003de8:	e011      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003df2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6892      	ldr	r2, [r2, #8]
 8003dfa:	0211      	lsls	r1, r2, #8
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6952      	ldr	r2, [r2, #20]
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0652      	lsls	r2, r2, #25
 8003e06:	430a      	orrs	r2, r1
 8003e08:	4915      	ldr	r1, [pc, #84]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fc ff0f 	bl	8000c3c <HAL_GetTick>
 8003e1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e20:	e009      	b.n	8003e36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e22:	f7fc ff0b 	bl	8000c3c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d902      	bls.n	8003e36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	73fb      	strb	r3, [r7, #15]
          break;
 8003e34:	e005      	b.n	8003e42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0ef      	beq.n	8003e22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc fd48 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 faba 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e033      	b.n	8003f94 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_TIM_Base_Start+0x8c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_Base_Start+0x3e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_Base_Start+0x3e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_TIM_Base_Start+0x90>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d115      	bne.n	8003f7e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_TIM_Base_Start+0x94>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d015      	beq.n	8003f90 <HAL_TIM_Base_Start+0x7c>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6a:	d011      	beq.n	8003f90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7c:	e008      	b.n	8003f90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	00010007 	.word	0x00010007

08003fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e049      	b.n	8004052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f841 	bl	800405a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 fa16 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004086:	2302      	movs	r3, #2
 8004088:	e0fd      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x216>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b14      	cmp	r3, #20
 8004096:	f200 80f0 	bhi.w	800427a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	0800427b 	.word	0x0800427b
 80040a8:	0800427b 	.word	0x0800427b
 80040ac:	0800427b 	.word	0x0800427b
 80040b0:	08004135 	.word	0x08004135
 80040b4:	0800427b 	.word	0x0800427b
 80040b8:	0800427b 	.word	0x0800427b
 80040bc:	0800427b 	.word	0x0800427b
 80040c0:	08004177 	.word	0x08004177
 80040c4:	0800427b 	.word	0x0800427b
 80040c8:	0800427b 	.word	0x0800427b
 80040cc:	0800427b 	.word	0x0800427b
 80040d0:	080041b7 	.word	0x080041b7
 80040d4:	0800427b 	.word	0x0800427b
 80040d8:	0800427b 	.word	0x0800427b
 80040dc:	0800427b 	.word	0x0800427b
 80040e0:	080041f9 	.word	0x080041f9
 80040e4:	0800427b 	.word	0x0800427b
 80040e8:	0800427b 	.word	0x0800427b
 80040ec:	0800427b 	.word	0x0800427b
 80040f0:	08004239 	.word	0x08004239
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f9f2 	bl	80044e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	619a      	str	r2, [r3, #24]
      break;
 8004132:	e0a3      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fa4e 	bl	80045dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	619a      	str	r2, [r3, #24]
      break;
 8004174:	e082      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 faa7 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0208 	orr.w	r2, r2, #8
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0204 	bic.w	r2, r2, #4
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
      break;
 80041b4:	e062      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 faff 	bl	80047c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
      break;
 80041f6:	e041      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fb3c 	bl	800487c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004236:	e021      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fb74 	bl	800492c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	021a      	lsls	r2, r3, #8
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004278:	e000      	b.n	800427c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800427a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0b5      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x184>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	d03e      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xd4>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	f200 8087 	bhi.w	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	f000 8085 	beq.w	8004400 <HAL_TIM_ConfigClockSource+0x170>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d87f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d01a      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xa6>
 8004300:	2b70      	cmp	r3, #112	; 0x70
 8004302:	d87b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d050      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x11a>
 8004308:	2b60      	cmp	r3, #96	; 0x60
 800430a:	d877      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b50      	cmp	r3, #80	; 0x50
 800430e:	d03c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xfa>
 8004310:	2b50      	cmp	r3, #80	; 0x50
 8004312:	d873      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d058      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x13a>
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d86f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b30      	cmp	r3, #48	; 0x30
 800431e:	d064      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d86b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d060      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d867      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d05a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004334:	e062      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f000 fbc5 	bl	8004ad4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004358:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	609a      	str	r2, [r3, #8]
      break;
 8004362:	e04e      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f000 fbae 	bl	8004ad4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e03b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fb22 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2150      	movs	r1, #80	; 0x50
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fb7b 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 80043a8:	e02b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fb41 	bl	8004a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2160      	movs	r1, #96	; 0x60
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb6b 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 80043c8:	e01b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fb02 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb5b 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e00b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 fb52 	bl	8004a9e <TIM_ITRx_SetConfig>
        break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004400:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0x20>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d108      	bne.n	800444e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <TIM_Base_SetConfig+0xc0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x52>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <TIM_Base_SetConfig+0xc4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <TIM_Base_SetConfig+0xbc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0xa0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <TIM_Base_SetConfig+0xc0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0xa0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <TIM_Base_SetConfig+0xc4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	615a      	str	r2, [r3, #20]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400

080044e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0302 	bic.w	r3, r3, #2
 8004530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <TIM_OC1_SetConfig+0xec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_OC1_SetConfig+0x70>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <TIM_OC1_SetConfig+0xf0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_OC1_SetConfig+0x70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <TIM_OC1_SetConfig+0xf4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10c      	bne.n	800456e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0308 	bic.w	r3, r3, #8
 800455a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <TIM_OC1_SetConfig+0xec>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_OC1_SetConfig+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <TIM_OC1_SetConfig+0xf0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC1_SetConfig+0xa2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <TIM_OC1_SetConfig+0xf4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400

080045dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <TIM_OC2_SetConfig+0xe8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <TIM_OC2_SetConfig+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC2_SetConfig+0x98>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <TIM_OC2_SetConfig+0xec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC2_SetConfig+0x98>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <TIM_OC2_SetConfig+0xf0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d113      	bne.n	800469c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800467a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10d      	bne.n	800474e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800474c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_OC3_SetConfig+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <TIM_OC3_SetConfig+0x96>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <TIM_OC3_SetConfig+0xe8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_OC3_SetConfig+0x96>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <TIM_OC3_SetConfig+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400

080047c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a14      	ldr	r2, [pc, #80]	; (8004870 <TIM_OC4_SetConfig+0xb0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC4_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <TIM_OC4_SetConfig+0xb4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC4_SetConfig+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <TIM_OC4_SetConfig+0xb8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400

0800487c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a13      	ldr	r2, [pc, #76]	; (8004920 <TIM_OC5_SetConfig+0xa4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_OC5_SetConfig+0x6a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a12      	ldr	r2, [pc, #72]	; (8004924 <TIM_OC5_SetConfig+0xa8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_OC5_SetConfig+0x6a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a11      	ldr	r2, [pc, #68]	; (8004928 <TIM_OC5_SetConfig+0xac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d109      	bne.n	80048fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400

0800492c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	051b      	lsls	r3, r3, #20
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC6_SetConfig+0xa8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_OC6_SetConfig+0x6c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <TIM_OC6_SetConfig+0xac>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC6_SetConfig+0x6c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <TIM_OC6_SetConfig+0xb0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e04f      	b.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d004      	beq.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10c      	bne.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40014000 	.word	0x40014000

08004be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e060      	b.n	8004cbe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d115      	bne.n	8004cac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	051b      	lsls	r3, r3, #20
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4d0d      	ldr	r5, [pc, #52]	; (8004d08 <__libc_init_array+0x38>)
 8004cd4:	4c0d      	ldr	r4, [pc, #52]	; (8004d0c <__libc_init_array+0x3c>)
 8004cd6:	1b64      	subs	r4, r4, r5
 8004cd8:	10a4      	asrs	r4, r4, #2
 8004cda:	2600      	movs	r6, #0
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	4d0b      	ldr	r5, [pc, #44]	; (8004d10 <__libc_init_array+0x40>)
 8004ce2:	4c0c      	ldr	r4, [pc, #48]	; (8004d14 <__libc_init_array+0x44>)
 8004ce4:	f000 f820 	bl	8004d28 <_init>
 8004ce8:	1b64      	subs	r4, r4, r5
 8004cea:	10a4      	asrs	r4, r4, #2
 8004cec:	2600      	movs	r6, #0
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08004d80 	.word	0x08004d80
 8004d0c:	08004d80 	.word	0x08004d80
 8004d10:	08004d80 	.word	0x08004d80
 8004d14:	08004d84 	.word	0x08004d84

08004d18 <memset>:
 8004d18:	4402      	add	r2, r0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	f803 1b01 	strb.w	r1, [r3], #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
